from flask import Flask, request, jsonify
import os
import django
import logging
import json
from dotenv import load_dotenv
from asgiref.sync import sync_to_async
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "kindness_bot.settings")
django.setup()

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from bot.models import Child, KindDeed, Reward, Parent

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TELEGRAM_TOKEN')
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ Redis)
user_states = {}
user_contexts = {}
group_states = {}
group_contexts = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
class States:
    IDLE = 0              # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    WAITING_DEED = 1      # –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞
    WAITING_POINTS = 2    # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤
    PARENT_PASSWORD = 3   # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
    PARENT_MENU = 4           # –ú–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è
    PARENT_ADD_CHILD = 5      # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
    PARENT_ADD_DEED = 6       # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞ —Ä–µ–±–µ–Ω–∫—É (–æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è)
    PARENT_ADD_POINTS = 7     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞ —Ä–µ–±–µ–Ω–∫—É (–æ–∂–∏–¥–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤)
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Django –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
@sync_to_async
def get_or_create_child(telegram_id, name):
    return Child.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={"name": name}
    )

@sync_to_async
def get_child(telegram_id):
    return Child.objects.get(telegram_id=telegram_id)

@sync_to_async
def get_recent_deeds(child, limit=5):
    return list(child.deeds.order_by('-created_at')[:limit])

@sync_to_async
def get_rewards():
    return list(Reward.objects.all().order_by('points_required'))

@sync_to_async
def create_deed(child, description, points, parent=None):
    return KindDeed.objects.create(
        child=child,
        description=description,
        points=points,
        added_by=parent
    )

@sync_to_async
def update_child_points(child, points):
    child.total_points += points
    child.save()
    return child.total_points

@sync_to_async
def get_or_create_parent(telegram_id, name):
    return Parent.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={"name": name}
    )

@sync_to_async
def get_parent(telegram_id):
    return Parent.objects.get(telegram_id=telegram_id)

@sync_to_async
def verify_parent(telegram_id):
    try:
        return Parent.objects.get(telegram_id=telegram_id), True
    except Parent.DoesNotExist:
        return None, False

@sync_to_async
def get_child_by_name(name):
    try:
        return Child.objects.get(name=name)
    except Child.DoesNotExist:
        return None
    except Child.MultipleObjectsReturned:
        return Child.objects.filter(name=name).first()

@sync_to_async
def is_parent_of_child(parent, child):
    return parent.children.filter(telegram_id=child.telegram_id).exists()

@sync_to_async
def set_parent_password(parent, password):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
    import hashlib
    # –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã)
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    parent.password = hashed_password
    parent.save()
    return parent

@sync_to_async
def verify_parent_password(parent, password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
    import hashlib
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    return parent.password == hashed_password

@sync_to_async
def get_parent_children(parent):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ—Ç–µ–π —Ä–æ–¥–∏—Ç–µ–ª—è"""
    return list(parent.children.all())

@sync_to_async
def add_child_to_parent(parent, child):
    """–ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–±–µ–Ω–∫–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é"""
    parent.children.add(child)
    return True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
@app.route(f'/{TOKEN}', methods=['POST'])
async def webhook():
    try:
        update = request.get_json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω update: {json.dumps(update, indent=2)}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'message' in update:
            await process_message(update['message'])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
        if 'callback_query' in update:
            await process_callback_query(update['callback_query'])

        return jsonify({'status': 'ok'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def process_message(message):
    try:
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        is_group = message['chat']['type'] in ['group', 'supergroup']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if 'text' not in message:
            return
        
        text = message['text']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if is_group:
            if chat_id not in group_states:
                group_states[chat_id] = {}
            if user_id not in group_states[chat_id]:
                group_states[chat_id][user_id] = States.IDLE
            if chat_id not in group_contexts:
                group_contexts[chat_id] = {}
            if user_id not in group_contexts[chat_id]:
                group_contexts[chat_id][user_id] = {}
            current_state = group_states[chat_id][user_id]
        else:
            current_state = user_states.get(user_id, States.IDLE)

        logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {current_state}, —Ç–∏–ø —á–∞—Ç–∞: {'–≥—Ä—É–ø–ø–∞' if is_group else '–ª–∏—á–Ω—ã–π'}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if current_state == States.WAITING_DEED:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {text}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —á–∞—Ç–∞
            if is_group:
                if chat_id not in group_contexts:
                    group_contexts[chat_id] = {}
                if user_id not in group_contexts[chat_id]:
                    group_contexts[chat_id][user_id] = {}
                group_contexts[chat_id][user_id]['deed_description'] = text
            # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
                await send_message(
                    chat_id,
                    f"üëç @{message['from']['username'] if 'username' in message['from'] else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}, –æ–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ —Ç—ã –ø–æ–ª—É—á–∏–ª –∑–∞ —ç—Ç–æ –¥–µ–ª–æ:"
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_states[user_id] = States.WAITING_POINTS
                logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {States.WAITING_POINTS} –≤ —á–∞—Ç–µ {chat_id}")
            else:
                # –õ–∏—á–Ω—ã–π —á–∞—Ç: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –±–∞–ª–ª–æ–≤
                user_contexts[user_id]['deed_description'] = text
                await send_message(
                    chat_id,
                    f"üëç –û—Ç–ª–∏—á–Ω–æ, @{message['from']['username'] if 'username' in message['from'] else ''}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ —Ç—ã –ø–æ–ª—É—á–∏–ª –∑–∞ —ç—Ç–æ –¥–µ–ª–æ:"
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_states[user_id] = States.WAITING_POINTS
                logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {States.WAITING_POINTS} –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ {chat_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if is_group:
                group_states[chat_id][user_id] = States.WAITING_POINTS
            else:
                user_states[user_id] = States.WAITING_POINTS
            return
            
        elif current_state == States.WAITING_POINTS:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {text}")
            
            try:
                points = int(text)
                if points <= 0:
                    await send_message(
                        chat_id,
                        "‚ùå –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
                    )
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                child = await get_child(user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —á–∞—Ç–∞
                if is_group:
                    deed_description = group_contexts[chat_id].get(user_id, {}).get('deed_description', '–î–æ–±—Ä–æ–µ –¥–µ–ª–æ')
                else:
                    deed_description = user_contexts.get(user_id, {}).get('deed_description', '–î–æ–±—Ä–æ–µ –¥–µ–ª–æ')
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ–±—Ä–æ–º –¥–µ–ª–µ
                deed = await create_deed(
                    child,
                    deed_description,
                    points
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
                total_points = await update_child_points(child, points)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                keyboard = {
                    "inline_keyboard": [
                        [{"text": "üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ", "callback_data": "add_deed"}],
                        [{"text": "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "callback_data": "back_to_menu"}]
                    ]
                }
                
                username = message['from']['username'] if 'username' in message['from'] else message['from']['first_name']
                await send_message(
                    chat_id,
                    f"üéâ –û—Ç–ª–∏—á–Ω–æ, @{username}! –î–æ–±—Ä–æ–µ –¥–µ–ª–æ '{deed_description}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n\n"
                    f"–¢—ã –ø–æ–ª—É—á–∏–ª *{points} –±–∞–ª–ª–æ–≤*!\n"
                    f"–í—Å–µ–≥–æ —É —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å *{total_points} –±–∞–ª–ª–æ–≤*.",
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —á–∞—Ç–∞
                if is_group:
                    group_states[chat_id][user_id] = States.IDLE
                    if user_id in group_contexts[chat_id]:
                        del group_contexts[chat_id][user_id]
                else:
                    user_states[user_id] = States.IDLE
                    if user_id in user_contexts:
                        del user_contexts[user_id]
                
            except ValueError:
                await send_message(
                    chat_id,
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
                )
                
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
        elif current_state == States.PARENT_PASSWORD:
            password = text
            is_registering = user_contexts.get(user_id, {}).get('registering_parent', False)
            
            if is_registering:
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
                parent, created = await get_or_create_parent(user_id, message['from']['first_name'])
                await set_parent_password(parent, password)
                
                # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if user_id in user_contexts and 'registering_parent' in user_contexts[user_id]:
                    del user_contexts[user_id]['registering_parent']
                
                keyboard = {
                    "inline_keyboard": [
                        [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", "callback_data": "add_child"}],
                        [{"text": "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–π", "callback_data": "view_children"}],
                        [{"text": "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "exit_parent_mode"}]
                    ]
                }
                
                await send_message(
                    chat_id,
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å.\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –≤–∞—à–∏–º –¥–µ—Ç—è–º –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.",
                    reply_markup=keyboard
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é
                user_states[user_id] = States.PARENT_MENU
            else:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
                parent = await get_parent(user_id)
                is_valid = await verify_parent_password(parent, password)
                
                if is_valid:
                    # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è
                    children = await get_parent_children(parent)
                    
                    keyboard = []
                    if children:
                        keyboard.append([{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ —Ä–µ–±–µ–Ω–∫—É", "callback_data": "add_deed_to_child"}])
                        keyboard.append([{"text": "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–π", "callback_data": "view_children"}])
                    
                    keyboard.append([{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", "callback_data": "add_child"}])
                    keyboard.append([{"text": "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "exit_parent_mode"}])
                    
                    await send_message(
                        chat_id,
                        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {parent.name}! –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è.\n\n"
                        f"–£ –≤–∞—Å {len(children)} {'–¥–µ—Ç–µ–π' if len(children) != 1 else '—Ä–µ–±–µ–Ω–æ–∫'} –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup={"inline_keyboard": keyboard}
                    )
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é
                    user_states[user_id] = States.PARENT_MENU
                else:
                    # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
                    await send_message(
                        chat_id,
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                    )
            
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–º
        elif current_state == States.PARENT_ADD_CHILD:
            child_name = text.strip()
            
            try:
                parent = await get_parent(user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–±–µ–Ω–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                child = await get_child_by_name(child_name)
                
                if child:
                    # –ï—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
                    await add_child_to_parent(parent, child)
                    
                    await send_message(
                        chat_id,
                        f"‚úÖ –†–µ–±–µ–Ω–æ–∫ *{child.name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                        f"–£ –Ω–µ–≥–æ —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parent –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è.",
                        parse_mode='Markdown'
                    )
                else:
                    # –ï—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                    await send_message(
                        chat_id,
                        f"‚ùì –†–µ–±–µ–Ω–æ–∫ —Å –∏–º–µ–Ω–µ–º '{child_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                        "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start, "
                        "–∞ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parent –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è."
                    )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                user_states[user_id] = States.IDLE
                
                return
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞: {e}")
                await send_message(
                    chat_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
                )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                user_states[user_id] = States.IDLE
                
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
        elif current_state == States.PARENT_ADD_DEED:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞
            if user_id not in user_contexts:
                user_contexts[user_id] = {}
            user_contexts[user_id]['deed_description'] = text
            
            await send_message(
                chat_id,
                "üëç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ —ç—Ç–æ –¥–µ–ª–æ:"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[user_id] = States.PARENT_ADD_POINTS
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
        elif current_state == States.PARENT_ADD_POINTS:
            try:
                points = int(text)
                if points <= 0:
                    await send_message(
                        chat_id,
                        "‚ùå –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —Ä–µ–±–µ–Ω–∫–∞
                parent = await get_parent(user_id)
                child_telegram_id = user_contexts.get(user_id, {}).get('selected_child_id')
                
                if not child_telegram_id:
                    await send_message(
                        chat_id,
                        "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ä–µ–±–µ–Ω–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /parent."
                    )
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    user_states[user_id] = States.IDLE
                    if user_id in user_contexts:
                        del user_contexts[user_id]
                        
                    return
                
                child = await get_child(child_telegram_id)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞
                deed_description = user_contexts.get(user_id, {}).get('deed_description', '–î–æ–±—Ä–æ–µ –¥–µ–ª–æ')
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ–±—Ä–æ–º –¥–µ–ª–µ
                deed = await create_deed(
                    child,
                    deed_description,
                    points,
                    parent
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
                total_points = await update_child_points(child, points)
                
                await send_message(
                    chat_id,
                    f"üéâ –î–æ–±—Ä–æ–µ –¥–µ–ª–æ –¥–ª—è {child.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                    f"–î–æ–±—Ä–æ–µ –¥–µ–ª–æ: *{deed_description}*\n"
                    f"–ë–∞–ª–ª—ã: *+{points}*\n"
                    f"–í—Å–µ–≥–æ —É —Ä–µ–±–µ–Ω–∫–∞ —Ç–µ–ø–µ—Ä—å *{total_points} –±–∞–ª–ª–æ–≤*.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parent –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è.",
                    parse_mode='Markdown'
                )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                user_states[user_id] = States.IDLE
                if user_id in user_contexts:
                    del user_contexts[user_id]
                
            except ValueError:
                await send_message(
                    chat_id,
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if text in ['/start', '/start@kindness_bot', '/start@KindDiaryBot']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ —Ä–µ–±–µ–Ω–æ–∫
            child, created = await get_or_create_child(user_id, message['from']['first_name'])
            
            welcome_text = (
                f"–ü—Ä–∏–≤–µ—Ç, {child.name}! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–≤–æ–∏—Ö –¥–æ–±—Ä—ã—Ö –¥–µ–ª.\n\n"
                f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*.\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ", "callback_data": "add_deed"}],
                    [{"text": "üåü –ú–æ–∏ –±–∞–ª–ª—ã", "callback_data": "check_points"}],
                    [{"text": "üéÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", "callback_data": "view_rewards"}],
                    [{"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}],
                    [{"text": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –Ø —Ä–æ–¥–∏—Ç–µ–ª—å", "callback_data": "register_parent"}]
                ]
            }
            
            await send_message(chat_id, welcome_text, parse_mode='Markdown', reply_markup=keyboard)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[user_id] = States.IDLE
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
        elif text == '/help':
            help_text = (
                "üåà *–ë–æ—Ç –î–æ–±—Ä—ã—Ö –î–µ–ª* üåà\n\n"
                "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –Ω–∏—Ö –±–∞–ª–ª—ã!\n\n"
                "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
                "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ\n"
                "/points - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –±–∞–ª–ª—ã\n"
                "/rewards - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥\n"
                "/parent - –†–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
                "1. –¢—ã –¥–µ–ª–∞–µ—à—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ\n"
                "2. –ó–∞–ø–∏—Å—ã–≤–∞–µ—à—å –µ–≥–æ –≤ —ç—Ç–æ—Ç –±–æ—Ç –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ\n"
                "3. –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—à—å –±–∞–ª–ª—ã\n"
                "4. –ü–æ–ª—É—á–∞–µ—à—å –∫–ª–∞—Å—Å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
                "*–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n"
                "‚Ä¢ 1000 –±–∞–ª–ª–æ–≤ - –û–±—ã—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞\n"
                "‚Ä¢ 3000 –±–∞–ª–ª–æ–≤ - –í–∑—è—Ç—å –ø—Ä–∏—Å—Ç–∞–≤–∫—É –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ\n"
                "‚Ä¢ 5000 –±–∞–ª–ª–æ–≤ - –ö—Ä—É—Ç–∞—è –∏–≥—Ä—É—à–∫–∞\n"
                "‚Ä¢ 35000 –±–∞–ª–ª–æ–≤ - Nintendo Switch\n\n"
                "–î–µ–ª–∞–π –±–æ–ª—å—à–µ –¥–æ–±—Ä—ã—Ö –¥–µ–ª –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã! üéâ"
            )
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "back_to_menu"}]
                ]
            }
           
            await send_message(chat_id, help_text, parse_mode='Markdown', reply_markup=keyboard)
        elif text == '/grouphelp':
            help_text = (
                "üåà *–ë–æ—Ç –î–æ–±—Ä—ã—Ö –î–µ–ª –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ* üåà\n\n"
                "–í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /add\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–ª—ã –∫–æ–º–∞–Ω–¥–æ–π /points\n"
                "‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∫–æ–º–∞–Ω–¥–æ–π /rewards\n\n"
                "–î–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."
            )
    
            await send_message(chat_id, help_text, parse_mode='Markdown')    
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add
        elif text == '/add':
            await send_message(chat_id, "üìù –û–ø–∏—à–∏ —Å–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ:")
            user_states[user_id] = States.WAITING_DEED
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /points
        elif text == '/points':
            await process_points_command(chat_id, user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rewards
        elif text == '/rewards':
            await process_rewards_command(chat_id, user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /parent
        elif text == '/parent':
            await process_parent_command(chat_id, user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
        elif text == '/cancel':
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states[user_id] = States.IDLE
            if user_id in user_contexts:
                del user_contexts[user_id]
            
            await send_message(
                chat_id,
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        elif text.startswith('/'):
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            await send_message(
                chat_id,
                "‚ùì –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏)
async def process_callback_query(callback_query):
    try:
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        user_id = callback_query['from']['id']
        message_id = callback_query['message']['message_id']
        is_group = callback_query['message']['chat']['type'] in ['group', 'supergroup']
        
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ"
        if data == 'add_deed':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–µ–ª–∞
            username = callback_query['from']['username'] if 'username' in callback_query['from'] else ''
            if is_group and username:
                await send_message(chat_id, f"@{username}, üìù –æ–ø–∏—à–∏ —Å–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ:")
            else:
                await send_message(chat_id, "üìù –û–ø–∏—à–∏ —Å–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ:")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —á–∞—Ç–∞
            if is_group:
                if chat_id not in group_states:
                    group_states[chat_id] = {}
                group_states[chat_id][user_id] = States.WAITING_DEED
            else:
                user_states[user_id] = States.WAITING_DEED
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
            await answer_callback_query(callback_query['id'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –±–∞–ª–ª—ã"
        elif data == 'check_points':
            child = await get_child(user_id)
            recent_deeds = await get_recent_deeds(child)
            
            text = f"üåü –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*! üåü\n\n"
            if recent_deeds:
                text += "üìã *–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞:*\n"
                for deed in recent_deeds:
                    date_str = deed.created_at.strftime("%d.%m.%Y")
                    text += f"‚Ä¢ {deed.description}: *{deed.points} –±–∞–ª–ª–æ–≤* ({date_str})\n"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "back_to_menu"}]
                ]
            }
            
            await send_message(chat_id, text, parse_mode='Markdown', reply_markup=keyboard)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
            await answer_callback_query(callback_query['id'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä–∞–¥—ã"
        elif data == 'view_rewards':
            rewards = await get_rewards()
            
            if not rewards:
                text = "–ü–æ–∫–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥. –ù–æ —Ç—ã –º–æ–∂–µ—à—å –∫–æ–ø–∏—Ç—å –Ω–∞:\n\n"
                text += f"‚Ä¢ *–û–±—ã—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞*: 1000 –±–∞–ª–ª–æ–≤\n"
                text += f"‚Ä¢ *–ü—Ä–∏—Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ*: 3000 –±–∞–ª–ª–æ–≤\n"
                text += f"‚Ä¢ *–ö—Ä—É—Ç–∞—è –∏–≥—Ä—É—à–∫–∞*: 5000 –±–∞–ª–ª–æ–≤\n"
                text += f"‚Ä¢ *Nintendo Switch*: 35000 –±–∞–ª–ª–æ–≤\n"
            else:
                text = "üéÅ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n\n"
                for reward in rewards:
                    text += f"‚Ä¢ *{reward.name}*: {reward.points_required} –±–∞–ª–ª–æ–≤"
                    if reward.description:
                        text += f" - {reward.description}"
                    text += "\n"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "back_to_menu"}]
                ]
            }
            
            await send_message(chat_id, text, parse_mode='Markdown', reply_markup=keyboard)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
            await answer_callback_query(callback_query['id'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
        elif data == 'help':
            help_text = (
                "üåà *–ë–æ—Ç –î–æ–±—Ä—ã—Ö –î–µ–ª* üåà\n\n"
                "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –Ω–∏—Ö –±–∞–ª–ª—ã!\n\n"
                "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
                "1. –¢—ã –¥–µ–ª–∞–µ—à—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ\n"
                "2. –ó–∞–ø–∏—Å—ã–≤–∞–µ—à—å –µ–≥–æ –≤ —ç—Ç–æ—Ç –±–æ—Ç\n"
                "3. –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—à—å –±–∞–ª–ª—ã\n"
                "4. –ü–æ–ª—É—á–∞–µ—à—å –∫–ª–∞—Å—Å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
                "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ\n"
                "/points - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –±–∞–ª–ª—ã\n"
                "/rewards - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥\n"
                "/parent - –†–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            )
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "back_to_menu"}]
                ]
            }
            
            await send_message(chat_id, help_text, parse_mode='Markdown', reply_markup=keyboard)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
            await answer_callback_query(callback_query['id'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø —Ä–æ–¥–∏—Ç–µ–ª—å"
        elif data == 'register_parent':
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
            await send_message(
                chat_id,
                "–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å?\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è:"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
            user_states[user_id] = States.PARENT_PASSWORD
            if user_id not in user_contexts:
                user_contexts[user_id] = {}
            user_contexts[user_id]['registering_parent'] = True
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
            await answer_callback_query(callback_query['id'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        elif data == 'back_to_menu':
            await process_back_to_menu(chat_id, user_id)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
            await answer_callback_query(callback_query['id'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞"
        elif data == 'add_child':
            await send_message(
                chat_id,
                "üë∂ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:"
            )
            user_states[user_id] = States.PARENT_ADD_CHILD
            
            await answer_callback_query(callback_query['id'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–π"
        elif data == 'view_children':
            try:
                parent = await get_parent(user_id)
                children = await get_parent_children(parent)
                
                if not children:
                    keyboard = {
                        "inline_keyboard": [
                            [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", "callback_data": "add_child"}],
                            [{"text": "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "exit_parent_mode"}]
                        ]
                    }
                    
                    await send_message(
                        chat_id,
                        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                        reply_markup=keyboard
                    )
                    return
                
                text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π:*\n\n"
                for child in children:
                    recent_deeds = await get_recent_deeds(child, limit=3)
                    
                    text += f"üë∂ *{child.name}*: {child.total_points} –±–∞–ª–ª–æ–≤\n"
                    if recent_deeds:
                        text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞:\n"
                        for deed in recent_deeds:
                            date_str = deed.created_at.strftime("%d.%m.%Y")
                            text += f"‚Ä¢ {deed.description}: {deed.points} –±–∞–ª–ª–æ–≤ ({date_str})\n"
                    text += "\n"
                
                keyboard = {
                    "inline_keyboard": [
                        [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ", "callback_data": "add_deed_to_child"}],
                        [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_parent_menu"}]
                    ]
                }
                
                await send_message(
                    chat_id,
                    text,
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–π: {e}")
                await send_message(
                    chat_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                
            await answer_callback_query(callback_query['id'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ —Ä–µ–±–µ–Ω–∫—É"
        elif data == 'add_deed_to_child':
            try:
                parent = await get_parent(user_id)
                children = await get_parent_children(parent)
                
                if not children:
                    keyboard = {
                        "inline_keyboard": [
                            [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", "callback_data": "add_child"}],
                            [{"text": "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "exit_parent_mode"}]
                        ]
                    }
                    
                    await send_message(
                        chat_id,
                        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –µ–º—É –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞.",
                        reply_markup=keyboard
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞
                keyboard = []
                for child in children:
                    keyboard.append([{"text": f"üë∂ {child.name}", "callback_data": f"select_child_{child.telegram_id}"}])
                
                keyboard.append([{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_parent_menu"}])
                
                await send_message(
                    chat_id,
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ:",
                    reply_markup={"inline_keyboard": keyboard}
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–±–µ–Ω–∫–∞: {e}")
                await send_message(
                    chat_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                
            await answer_callback_query(callback_query['id'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        elif data == 'exit_parent_mode':
            await send_message(
                chat_id,
                "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–æ–¥–∏—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
            )
            user_states[user_id] = States.IDLE
            await answer_callback_query(callback_query['id'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è
        elif data == 'back_to_parent_menu':
            try:
                parent = await get_parent(user_id)
                children = await get_parent_children(parent)
                
                keyboard = []
                if children:
                    keyboard.append([{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ —Ä–µ–±–µ–Ω–∫—É", "callback_data": "add_deed_to_child"}])
                    keyboard.append([{"text": "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–π", "callback_data": "view_children"}])
                
                keyboard.append([{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", "callback_data": "add_child"}])
                keyboard.append([{"text": "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "exit_parent_mode"}])
                
                await send_message(
                    chat_id,
                    f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {parent.name}! –í—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–æ–¥–∏—Ç–µ–ª—è.\n\n"
                    f"–£ –≤–∞—Å {len(children)} {'–¥–µ—Ç–µ–π' if len(children) != 1 else '—Ä–µ–±–µ–Ω–æ–∫'} –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup={"inline_keyboard": keyboard}
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è: {e}")
                await send_message(
                    chat_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                
            await answer_callback_query(callback_query['id'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞ (—Ñ–æ—Ä–º–∞—Ç: select_child_TELEGRAM_ID)
        elif data.startswith("select_child_"):
            try:
                child_telegram_id = int(data.split("_")[-1])
                child = await get_child(child_telegram_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                if user_id not in user_contexts:
                    user_contexts[user_id] = {}
                user_contexts[user_id]["selected_child_id"] = child_telegram_id
                
                await send_message(
                    chat_id,
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–±–µ–Ω–∫–∞: *{child.name}*\n\n"
                    "–û–ø–∏—à–∏—Ç–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–≤–µ—Ä—à–∏–ª —Ä–µ–±–µ–Ω–æ–∫:",
                    parse_mode='Markdown'
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                user_states[user_id] = States.PARENT_ADD_DEED
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–±–µ–Ω–∫–∞: {e}")
                await send_message(
                    chat_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                
            await answer_callback_query(callback_query['id'])
        
        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ callback_data
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
            await answer_callback_query(callback_query['id'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {e}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
async def process_points_command(chat_id, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–ª–æ–≤"""
    try:
        child = await get_child(user_id)
        recent_deeds = await get_recent_deeds(child)

        text = f"üåü –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*! üåü\n\n"
        if recent_deeds:
            text += "üìã *–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞:*\n"
            for deed in recent_deeds:
                date_str = deed.created_at.strftime("%d.%m.%Y")
                text += f"‚Ä¢ {deed.description}: *{deed.points} –±–∞–ª–ª–æ–≤* ({date_str})\n"

        keyboard = {
            "inline_keyboard": [
                [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "back_to_menu"}]
            ]
        }

        await send_message(chat_id, text, parse_mode='Markdown', reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã points: {e}")
        await send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start")

async def process_rewards_command(chat_id, user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥"""
    try:
        rewards = await get_rewards()

        if not rewards:
            text = "–ü–æ–∫–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥. –ù–æ —Ç—ã –º–æ–∂–µ—à—å –∫–æ–ø–∏—Ç—å –Ω–∞:\n\n"
            text += f"‚Ä¢ *–û–±—ã—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞*: 1000 –±–∞–ª–ª–æ–≤\n"
            text += f"‚Ä¢ *–ü—Ä–∏—Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ*: 3000 –±–∞–ª–ª–æ–≤\n"
            text += f"‚Ä¢ *–ö—Ä—É—Ç–∞—è –∏–≥—Ä—É—à–∫–∞*: 5000 –±–∞–ª–ª–æ–≤\n"
            text += f"‚Ä¢ *Nintendo Switch*: 35000 –±–∞–ª–ª–æ–≤\n"
        else:
            text = "üéÅ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n\n"
            for reward in rewards:
                text += f"‚Ä¢ *{reward.name}*: {reward.points_required} –±–∞–ª–ª–æ–≤"
                if reward.description:
                    text += f" - {reward.description}"
                text += "\n"

        keyboard = {
            "inline_keyboard": [
                [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "callback_data": "back_to_menu"}]
            ]
        }

        await send_message(chat_id, text, parse_mode='Markdown', reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã rewards: {e}")
        await send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start")

async def process_parent_command(chat_id, user_id):
   """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–∂–∏–º–∞ —Ä–æ–¥–∏—Ç–µ–ª—è"""
   try:
       # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å
       parent, is_parent = await verify_parent(user_id)

       if is_parent:
           await send_message(
               chat_id,
               f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {parent.name}! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∂–∏–º—É —Ä–æ–¥–∏—Ç–µ–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
           )
           # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
           user_states[user_id] = States.PARENT_PASSWORD
       else:
           await send_message(
               chat_id,
               "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?\n\n"
               "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è:"
           )
           # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
           user_states[user_id] = States.PARENT_PASSWORD
           if user_id not in user_contexts:
               user_contexts[user_id] = {}
           user_contexts[user_id]['registering_parent'] = True
   except Exception as e:
       logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã parent: {e}")
       await send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start")

async def process_back_to_menu(chat_id, user_id):
   """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
   try:
       child = await get_child(user_id)

       text = (
           f"–ü—Ä–∏–≤–µ—Ç, {child.name}! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–≤–æ–∏—Ö –¥–æ–±—Ä—ã—Ö –¥–µ–ª.\n\n"
           f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*.\n\n"
           "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
       )

       keyboard = {
           "inline_keyboard": [
               [{"text": "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ", "callback_data": "add_deed"}],
               [{"text": "üåü –ú–æ–∏ –±–∞–ª–ª—ã", "callback_data": "check_points"}],
               [{"text": "üéÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", "callback_data": "view_rewards"}],
               [{"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}],
               [{"text": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –Ø —Ä–æ–¥–∏—Ç–µ–ª—å", "callback_data": "register_parent"}]
           ]
       }

       await send_message(chat_id, text, parse_mode='Markdown', reply_markup=keyboard)

       # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
       user_states[user_id] = States.IDLE
   except Exception as e:
       logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
async def send_message(chat_id, text, parse_mode=None, reply_markup=None):
   """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
   url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"

   payload = {
       'chat_id': chat_id,
       'text': text
   }

   if parse_mode:
       payload['parse_mode'] = parse_mode

   if reply_markup:
       payload['reply_markup'] = reply_markup

   try:
       # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
       @sync_to_async
       def do_request():
           return requests.post(url, json=payload)

       response = await do_request()
       response_json = response.json()

       if not response_json.get('ok'):
           logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response_json}")

       return response_json
   except Exception as e:
       logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
       return None

async def edit_message(chat_id, message_id, text, parse_mode=None, reply_markup=None):
   """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
   url = f"https://api.telegram.org/bot{TOKEN}/editMessageText"

   payload = {
       'chat_id': chat_id,
       'message_id': message_id,
       'text': text
   }

   if parse_mode:
       payload['parse_mode'] = parse_mode

   if reply_markup:
       payload['reply_markup'] = reply_markup

   try:
       @sync_to_async
       def do_request():
           return requests.post(url, json=payload)

       response = await do_request()
       return response.json()
   except Exception as e:
       logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
       return None

async def answer_callback_query(callback_query_id, text=None):
   """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query"""
   url = f"https://api.telegram.org/bot{TOKEN}/answerCallbackQuery"

   payload = {
       'callback_query_id': callback_query_id
   }

   if text:
       payload['text'] = text

   try:
       @sync_to_async
       def do_request():
           return requests.post(url, json=payload)

       response = await do_request()
       return response.json()
   except Exception as e:
       logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query: {e}")
       return None

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
@app.route('/set_webhook', methods=['GET'])
def set_webhook():
   webhook_url = f"https://{request.host}/{TOKEN}"
   url = f"https://api.telegram.org/bot{TOKEN}/setWebhook?url={webhook_url}"

   response = requests.get(url)
   data = response.json()

   if data.get('ok'):
       return jsonify({
           'status': 'success',
           'message': f'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}',
           'result': data
       })
   else:
       return jsonify({
           'status': 'error',
           'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook',
           'result': data
       })

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è webhook
@app.route('/remove_webhook', methods=['GET'])
def remove_webhook():
   url = f"https://api.telegram.org/bot{TOKEN}/deleteWebhook"
   response = requests.get(url)
   data = response.json()

   return jsonify({
       'status': 'success' if data.get('ok') else 'error',
       'message': 'Webhook —É–¥–∞–ª–µ–Ω' if data.get('ok') else '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook',
       'result': data
   })

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ webhook
@app.route('/webhook_status', methods=['GET'])
def webhook_status():
   url = f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo"
   response = requests.get(url)
   data = response.json()

   return jsonify({
       'status': 'success',
       'webhook_info': data
   })

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç /web-hook
@app.route('/web-hook', methods=['GET'])
def web_hook():
   return "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É—Ç—å /set_webhook"

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def home():
   return '–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–æ–±—Ä—ã—Ö –¥–µ–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!'

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if __name__ == '__main__':
   app.run(debug=True)