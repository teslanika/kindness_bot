import logging
import os
import django
import hashlib
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from asgiref.sync import sync_to_async

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "kindness_bot.settings")
django.setup()

from bot.models import Child, KindDeed, Reward, Parent

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_ACTION, ADDING_DEED, ADDING_POINTS = range(3)
PARENT_AUTH, PARENT_PASSWORD, PARENT_MENU, PARENT_SELECT_CHILD = range(3, 7)
PARENT_ADD_DEED, PARENT_ADD_POINTS = range(7, 9)
GROUP_ADD_DEED, GROUP_ADD_POINTS, GROUP_CONFIRM = range(9, 12)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
@sync_to_async
def get_or_create_child(telegram_id, name):
    return Child.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={"name": name}
    )

@sync_to_async
def get_child(telegram_id):
    return Child.objects.get(telegram_id=telegram_id)

@sync_to_async
def get_recent_deeds(child, limit=5):
    return list(child.deeds.order_by('-created_at')[:limit])

@sync_to_async
def get_rewards():
    return list(Reward.objects.all().order_by('points_required'))

@sync_to_async
def create_deed(child, description, points, parent=None):
    return KindDeed.objects.create(
        child=child,
        description=description,
        points=points,
        added_by=parent
    )

@sync_to_async
def update_child_points(child, points):
    child.total_points += points
    child.save()
    return child.total_points

@sync_to_async
def get_or_create_parent(telegram_id, name):
    return Parent.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={"name": name}
    )

@sync_to_async
def get_parent(telegram_id):
    return Parent.objects.get(telegram_id=telegram_id)

@sync_to_async
def set_parent_password(parent, password):
    # –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã)
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    parent.password = hashed_password
    parent.save()
    return parent

@sync_to_async
def verify_parent_password(parent, password):
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    return parent.password == hashed_password

@sync_to_async
def get_parent_children(parent):
    return list(parent.children.all())

@sync_to_async
def add_child_to_parent(parent, child):
    parent.children.add(child)
    return True

@sync_to_async
def get_child_by_name(name):
    try:
        return Child.objects.get(name=name)
    except Child.DoesNotExist:
        return None
    except Child.MultipleObjectsReturned:
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º, –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ
        return Child.objects.filter(name=name).first()
    
@sync_to_async
def get_all_children():
    return list(Child.objects.all())

@sync_to_async
def is_parent_of_child(parent, child):
    return parent.children.filter(telegram_id=child.telegram_id).exists()

@sync_to_async
def verify_parent(telegram_id):
    try:
        return Parent.objects.get(telegram_id=telegram_id), True
    except Parent.DoesNotExist:
        return None, False

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤ –≥—Ä—É–ø–ø–µ ---

async def group_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø–µ
    if not update.effective_chat.type in ['group', 'supergroup']:
        return
    
    message = update.message.text
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞ –≤ –≥—Ä—É–ø–ø–µ
    # –§–æ—Ä–º–∞—Ç: "–î–æ–±—Ä–æ–µ –¥–µ–ª–æ: [–∏–º—è —Ä–µ–±–µ–Ω–∫–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞] [–±–∞–ª–ª—ã]"
    # –ü—Ä–∏–º–µ—Ä: "–î–æ–±—Ä–æ–µ –¥–µ–ª–æ: –ú–∞—à–∞ –ø–æ–º–æ–≥–ª–∞ —Å —É–±–æ—Ä–∫–æ–π –Ω–∞ –∫—É—Ö–Ω–µ 50"
    deed_pattern = re.compile(r'–¥–æ–±—Ä–æ–µ –¥–µ–ª–æ:?\s+([^\d]+)\s+(.+)\s+(\d+)$', re.IGNORECASE)
    match = deed_pattern.match(message)
    
    if match:
        child_name, deed_description, points_str = match.groups()
        child_name = child_name.strip()
        deed_description = deed_description.strip()
        
        try:
            points = int(points_str)
            if points <= 0:
                await update.message.reply_text(
                    "‚ùå –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Ä–æ–¥–∏—Ç–µ–ª–µ–º
            sender_id = update.effective_user.id
            parent, is_parent = await verify_parent(sender_id)
            
            if not is_parent:
                await update.message.reply_text(
                    "‚ùå –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –≤ –≥—Ä—É–ø–ø–µ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /parent –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
                )
                return
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏
            child = await get_child_by_name(child_name)
            
            if not child:
                await update.message.reply_text(
                    f"‚ùå –†–µ–±–µ–Ω–æ–∫ —Å –∏–º–µ–Ω–µ–º '{child_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                    "–†–µ–±–µ–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
            is_child_of_parent = await is_parent_of_child(parent, child)
            
            if not is_child_of_parent:
                await update.message.reply_text(
                    f"‚ùå –†–µ–±–µ–Ω–æ–∫ '{child_name}' –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.\n"
                    "–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /parent –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ–±—Ä–æ–º –¥–µ–ª–µ
            deed = await create_deed(
                child,
                deed_description,
                points,
                parent
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
            total_points = await update_child_points(child, points)
            
            await update.message.reply_text(
                f"üéâ –î–æ–±—Ä–æ–µ –¥–µ–ª–æ –¥–ª—è {child.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                f"–î–æ–±—Ä–æ–µ –¥–µ–ª–æ: *{deed_description}*\n"
                f"–ë–∞–ª–ª—ã: *+{points}*\n"
                f"–í—Å–µ–≥–æ —É {child.name} —Ç–µ–ø–µ—Ä—å *{total_points} –±–∞–ª–ª–æ–≤*.",
                parse_mode='Markdown'
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–∞–ª–ª–æ–≤. –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞."
            )
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
    # –§–æ—Ä–º–∞—Ç: "–ë–∞–ª–ª—ã [–∏–º—è —Ä–µ–±–µ–Ω–∫–∞]"
    # –ü—Ä–∏–º–µ—Ä: "–ë–∞–ª–ª—ã –ú–∞—à–∞"
    points_pattern = re.compile(r'–±–∞–ª–ª—ã\s+(.+)$', re.IGNORECASE)
    match = points_pattern.match(message)
    
    if match:
        child_name = match.group(1).strip()
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏
            child = await get_child_by_name(child_name)
            
            if not child:
                await update.message.reply_text(
                    f"‚ùå –†–µ–±–µ–Ω–æ–∫ —Å –∏–º–µ–Ω–µ–º '{child_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞
            recent_deeds = await get_recent_deeds(child)
            
            text = f"üåü –£ {child.name} —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*! üåü\n\n"
            if recent_deeds:
                text += "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞:*\n"
                for deed in recent_deeds:
                    date_str = deed.created_at.strftime("%d.%m.%Y")
                    text += f"‚Ä¢ {deed.description}: *{deed.points} –±–∞–ª–ª–æ–≤* ({date_str})\n"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–ª–æ–≤."
            )
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥ –≤ –≥—Ä—É–ø–ø–µ
    # –§–æ—Ä–º–∞—Ç: "–ù–∞–≥—Ä–∞–¥—ã"
    rewards_pattern = re.compile(r'–Ω–∞–≥—Ä–∞–¥—ã$', re.IGNORECASE)
    match = rewards_pattern.match(message)
    
    if match:
        try:
            rewards = await get_rewards()
            
            if not rewards:
                text = "–ü–æ–∫–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥. –ù–æ –¥–µ—Ç–∏ –º–æ–≥—É—Ç –∫–æ–ø–∏—Ç—å –Ω–∞:\n\n"
                text += f"‚Ä¢ *–û–±—ã—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞*: 1000 –±–∞–ª–ª–æ–≤\n"
                text += f"‚Ä¢ *–ü—Ä–∏—Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ*: 3000 –±–∞–ª–ª–æ–≤\n"
                text += f"‚Ä¢ *–ö—Ä—É—Ç–∞—è –∏–≥—Ä—É—à–∫–∞*: 5000 –±–∞–ª–ª–æ–≤\n"
                text += f"‚Ä¢ *Nintendo Switch*: 35000 –±–∞–ª–ª–æ–≤\n"
            else:
                text = "üéÅ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n\n"
                for reward in rewards:
                    text += f"‚Ä¢ *{reward.name}*: {reward.points_required} –±–∞–ª–ª–æ–≤"
                    if reward.description:
                        text += f" - {reward.description}"
                    text += "\n"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –Ω–∞–≥—Ä–∞–¥ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –Ω–∞–≥—Ä–∞–¥."
            )

async def group_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
    if not update.effective_chat.type in ['group', 'supergroup']:
        return
    
    help_text = (
        "üåà *–ë–æ—Ç –î–æ–±—Ä—ã—Ö –î–µ–ª –≤ –≥—Ä—É–ø–ø–µ* üåà\n\n"
        "–†–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –¥–µ—Ç—è–º –ø—Ä—è–º–æ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!\n\n"
        "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ:*\n\n"
        "1Ô∏è‚É£ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞:*\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ: `–î–æ–±—Ä–æ–µ –¥–µ–ª–æ: [–∏–º—è —Ä–µ–±–µ–Ω–∫–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ] [–±–∞–ª–ª—ã]`\n"
        "–ü—Ä–∏–º–µ—Ä: `–î–æ–±—Ä–æ–µ –¥–µ–ª–æ: –ú–∞—à–∞ –ø–æ–º–æ–≥–ª–∞ —Å —É–±–æ—Ä–∫–æ–π 50`\n\n"
        "2Ô∏è‚É£ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–ª–æ–≤:*\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ: `–ë–∞–ª–ª—ã [–∏–º—è —Ä–µ–±–µ–Ω–∫–∞]`\n"
        "–ü—Ä–∏–º–µ—Ä: `–ë–∞–ª–ª—ã –ú–∞—à–∞`\n\n"
        "3Ô∏è‚É£ *–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥:*\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ: `–ù–∞–≥—Ä–∞–¥—ã`\n\n"
        "*–í–∞–∂–Ω–æ:*\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –≤ –≥—Ä—É–ø–ø–µ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–∏\n"
        "‚Ä¢ –†–µ–±–µ–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ –†–µ–±–µ–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É —Ä–æ–¥–∏—Ç–µ–ª—è\n\n"
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º."
    )
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    telegram_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å
    parent = None
    try:
        parent = await get_parent(telegram_id)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–æ–¥–∏—Ç–µ–ª—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è
        keyboard = [
            [InlineKeyboardButton("üë®‚Äçüëß‚Äçüë¶ –í–æ–π—Ç–∏ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å", callback_data="parent_login")],
            [InlineKeyboardButton("üë∂ –í–æ–π—Ç–∏ –∫–∞–∫ —Ä–µ–±–µ–Ω–æ–∫", callback_data="child_login")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤—Ö–æ–¥–∞:",
            reply_markup=reply_markup
        )
        return PARENT_AUTH
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —Ä–æ–¥–∏—Ç–µ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ä–µ–±–µ–Ω–∫–∞
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–µ–±–µ–Ω–æ–∫
    try:
        child, created = await get_or_create_child(telegram_id, user.first_name)
        
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ", callback_data="add_deed")],
            [InlineKeyboardButton("üåü –ú–æ–∏ –±–∞–ª–ª—ã", callback_data="check_points")],
            [InlineKeyboardButton("üéÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", callback_data="view_rewards")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –Ø —Ä–æ–¥–∏—Ç–µ–ª—å", callback_data="register_parent")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {child.name}! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–≤–æ–∏—Ö –¥–æ–±—Ä—ã—Ö –¥–µ–ª.\n\n"
            f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return CHOOSING_ACTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text = (
        "üåà *–ë–æ—Ç –î–æ–±—Ä—ã—Ö –î–µ–ª* üåà\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –Ω–∏—Ö –±–∞–ª–ª—ã!\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ\n"
        "/points - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –±–∞–ª–ª—ã\n"
        "/rewards - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥\n"
        "/parent - –†–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "1. –¢—ã –¥–µ–ª–∞–µ—à—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ\n"
        "2. –ó–∞–ø–∏—Å—ã–≤–∞–µ—à—å –µ–≥–æ –≤ —ç—Ç–æ—Ç –±–æ—Ç –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ\n"
        "3. –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—à—å –±–∞–ª–ª—ã\n"
        "4. –ü–æ–ª—É—á–∞–µ—à—å –∫–ª–∞—Å—Å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
        "*–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n"
        "‚Ä¢ 1000 –±–∞–ª–ª–æ–≤ - –û–±—ã—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞\n"
        "‚Ä¢ 3000 –±–∞–ª–ª–æ–≤ - –í–∑—è—Ç—å –ø—Ä–∏—Å—Ç–∞–≤–∫—É –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ\n"
        "‚Ä¢ 5000 –±–∞–ª–ª–æ–≤ - –ö—Ä—É—Ç–∞—è –∏–≥—Ä—É—à–∫–∞\n"
        "‚Ä¢ 35000 –±–∞–ª–ª–æ–≤ - Nintendo Switch\n\n"
        "–î–µ–ª–∞–π –±–æ–ª—å—à–µ –¥–æ–±—Ä—ã—Ö –¥–µ–ª –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã! üéâ"
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown'
    )

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä–µ–±–µ–Ω–∫–∞ ---

async def add_deed_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞"""
    await update.message.reply_text("–û–ø–∏—à–∏ —Å–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ:")
    return ADDING_DEED

async def check_points_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–ª–æ–≤"""
    telegram_id = update.effective_user.id
    try:
        child = await get_child(telegram_id)
        recent_deeds = await get_recent_deeds(child)
        
        text = f"üåü –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*! üåü\n\n"
        if recent_deeds:
            text += "üìã *–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞:*\n"
            for deed in recent_deeds:
                date_str = deed.created_at.strftime("%d.%m.%Y")
                text += f"‚Ä¢ {deed.description}: *{deed.points} –±–∞–ª–ª–æ–≤* ({date_str})\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")

async def view_rewards_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥"""
    rewards = await get_rewards()
    
    if not rewards:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥. –ü–æ–ø—Ä–æ—Å–∏ –≤–∑—Ä–æ—Å–ª—ã—Ö –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö.\n\n"
        text += f"‚Ä¢ *–û–±—ã—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞*: 1000 –±–∞–ª–ª–æ–≤\n"
        text += f"‚Ä¢ *–ü—Ä–∏—Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ*: 3000 –±–∞–ª–ª–æ–≤\n"
        text += f"‚Ä¢ *–ö—Ä—É—Ç–∞—è –∏–≥—Ä—É—à–∫–∞*: 5000 –±–∞–ª–ª–æ–≤\n"
        text += f"‚Ä¢ *Nintendo Switch*: 35000 –±–∞–ª–ª–æ–≤\n"
    else:
        text = "üéÅ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n\n"
        for reward in rewards:
            text += f"‚Ä¢ *{reward.name}*: {reward.points_required} –±–∞–ª–ª–æ–≤"
            if reward.description:
                text += f" - {reward.description}"
            text += "\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def process_deed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞
    context.user_data["deed_description"] = update.message.text
    
    await update.message.reply_text(
        "üëç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ —Ç—ã –ø–æ–ª—É—á–∏–ª –∑–∞ —ç—Ç–æ –¥–µ–ª–æ:"
    )
    
    return ADDING_POINTS

async def process_points(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤"""
    try:
        points = int(update.message.text)
        if points <= 0:
            await update.message.reply_text(
                "‚ùå –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
            )
            return ADDING_POINTS
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = update.effective_user.id
        child = await get_child(telegram_id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ–±—Ä–æ–º –¥–µ–ª–µ
        deed = await create_deed(
            child,
            context.user_data["deed_description"],
            points
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
        total_points = await update_child_points(child, points)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ", callback_data="add_deed")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –î–æ–±—Ä–æ–µ –¥–µ–ª–æ '{deed.description}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n\n"
            f"–¢—ã –ø–æ–ª—É—á–∏–ª *{deed.points} –±–∞–ª–ª–æ–≤*!\n"
            f"–í—Å–µ–≥–æ —É —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å *{total_points} –±–∞–ª–ª–æ–≤*.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return CHOOSING_ACTION
    
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )
        return ADDING_POINTS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start"
        )
        return ConversationHandler.END

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä–æ–¥–∏—Ç–µ–ª—è ---

async def parent_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è"""
    user = update.effective_user
    telegram_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å
    try:
        parent = await get_parent(telegram_id)
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        await update.message.reply_text(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {parent.name}! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∂–∏–º—É —Ä–æ–¥–∏—Ç–µ–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
        )
        return PARENT_PASSWORD
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await update.message.reply_text(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è:"
        )
        context.user_data["registering_parent"] = True
        return PARENT_PASSWORD

async def handle_parent_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≤—Ö–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "parent_login":
        await query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è:"
        )
        return PARENT_PASSWORD
    
    elif query.data == "child_login":
        # –í—Ö–æ–¥–∏–º –∫–∞–∫ —Ä–µ–±–µ–Ω–æ–∫
        user = update.effective_user
        telegram_id = user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º ID –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫
            child = await get_child(telegram_id)
            
            keyboard = [
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ", callback_data="add_deed")],
                [InlineKeyboardButton("üåü –ú–æ–∏ –±–∞–ª–ª—ã", callback_data="check_points")],
                [InlineKeyboardButton("üéÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", callback_data="view_rewards")],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
                [InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –Ø —Ä–æ–¥–∏—Ç–µ–ª—å", callback_data="register_parent")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"–ü—Ä–∏–≤–µ—Ç, {child.name}! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–≤–æ–∏—Ö –¥–æ–±—Ä—ã—Ö –¥–µ–ª.\n\n"
                f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*.\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return CHOOSING_ACTION
        except Exception:
            # –ï—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            child, created = await get_or_create_child(telegram_id, user.first_name)
            
            keyboard = [
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ", callback_data="add_deed")],
                [InlineKeyboardButton("üåü –ú–æ–∏ –±–∞–ª–ª—ã", callback_data="check_points")],
                [InlineKeyboardButton("üéÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", callback_data="view_rewards")],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"–ü—Ä–∏–≤–µ—Ç, {child.name}! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–≤–æ–∏—Ö –¥–æ–±—Ä—ã—Ö –¥–µ–ª.\n\n"
                f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*.\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            return CHOOSING_ACTION
    
    return PARENT_AUTH

async def handle_parent_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
    user = update.effective_user
    telegram_id = user.id
    password = update.message.text
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    if context.user_data.get("registering_parent"):
        parent, created = await get_or_create_parent(telegram_id, user.first_name)
        await set_parent_password(parent, password)
        
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data.pop("registering_parent", None)
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", callback_data="add_child")],
            [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–π", callback_data="view_children")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="exit_parent_mode")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –≤–∞—à–∏–º –¥–µ—Ç—è–º –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.",
            reply_markup=reply_markup
        )
        return PARENT_MENU
    
    # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ö–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    try:
        parent = await get_parent(telegram_id)
        is_valid = await verify_parent_password(parent, password)
        
        if is_valid:
            # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è
            children = await get_parent_children(parent)
            
            keyboard = []
            if children:
                keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ —Ä–µ–±–µ–Ω–∫—É", callback_data="add_deed_to_child")])
                keyboard.append([InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–π", callback_data="view_children")])
            
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", callback_data="add_child")])
            keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="exit_parent_mode")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {parent.name}! –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è.\n\n"
                f"–£ –≤–∞—Å {len(children)} {'–¥–µ—Ç–µ–π' if len(children) != 1 else '—Ä–µ–±–µ–Ω–æ–∫'} –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            return PARENT_MENU
        else:
            # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
            return PARENT_PASSWORD
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return ConversationHandler.END

async def handle_parent_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    telegram_id = user.id
    
    if query.data == "add_child":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ä–µ–±–µ–Ω–∫–∞
        await query.edit_message_text(
            "üë∂ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:"
        )
        return PARENT_SELECT_CHILD
    
    elif query.data == "view_children":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ—Ç–µ–π
        try:
            parent = await get_parent(telegram_id)
            children = await get_parent_children(parent)
            
            if not children:
                keyboard = [
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", callback_data="add_child")],
                    [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="exit_parent_mode")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                    reply_markup=reply_markup
                )
                return PARENT_MENU
            
            text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π:*\n\n"
            for child in children:
                recent_deeds = await get_recent_deeds(child, limit=3)
                
                text += f"üë∂ *{child.name}*: {child.total_points} –±–∞–ª–ª–æ–≤\n"
                if recent_deeds:
                    text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞:\n"
                    for deed in recent_deeds:
                        date_str = deed.created_at.strftime("%d.%m.%Y")
                        text += f"‚Ä¢ {deed.description}: {deed.points} –±–∞–ª–ª–æ–≤ ({date_str})\n"
                text += "\n"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ", callback_data="add_deed_to_child")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_parent_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return PARENT_MENU
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–π: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return PARENT_MENU
    
    elif query.data == "add_deed_to_child":
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞
        try:
            parent = await get_parent(telegram_id)
            children = await get_parent_children(parent)
            
            if not children:
                keyboard = [
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", callback_data="add_child")],
                    [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="exit_parent_mode")],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –µ–º—É –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞.",
                    reply_markup=reply_markup
                )
                return PARENT_MENU
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞
            keyboard = []
            for child in children:
                keyboard.append([InlineKeyboardButton(f"üë∂ {child.name}", callback_data=f"select_child_{child.telegram_id}")])
            
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_parent_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ:",
                reply_markup=reply_markup
            )
            return PARENT_SELECT_CHILD
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–±–µ–Ω–∫–∞: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return PARENT_MENU
    
    elif query.data == "back_to_parent_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è
        try:
            parent = await get_parent(telegram_id)
            children = await get_parent_children(parent)
            
            keyboard = []
            if children:
                keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ —Ä–µ–±–µ–Ω–∫—É", callback_data="add_deed_to_child")])
                keyboard.append([InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–π", callback_data="view_children")])
            
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", callback_data="add_child")])
            keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="exit_parent_mode")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {parent.name}! –í—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–æ–¥–∏—Ç–µ–ª—è.\n\n"
                f"–£ –≤–∞—Å {len(children)} {'–¥–µ—Ç–µ–π' if len(children) != 1 else '—Ä–µ–±–µ–Ω–æ–∫'} –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            return PARENT_MENU
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return PARENT_MENU
    
    elif query.data == "exit_parent_mode":
        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–æ–¥–∏—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
        )
        return ConversationHandler.END
    
    # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —Ä–µ–±–µ–Ω–∫–∞ (—Ñ–æ—Ä–º–∞—Ç: select_child_TELEGRAM_ID)
    elif query.data.startswith("select_child_"):
        try:
            child_telegram_id = int(query.data.split("_")[-1])
            child = await get_child(child_telegram_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data["selected_child_id"] = child_telegram_id
            
            await query.edit_message_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–±–µ–Ω–∫–∞: *{child.name}*\n\n"
                "–û–ø–∏—à–∏—Ç–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–≤–µ—Ä—à–∏–ª —Ä–µ–±–µ–Ω–æ–∫:",
                parse_mode='Markdown'
            )
            return PARENT_ADD_DEED
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–±–µ–Ω–∫–∞: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return PARENT_MENU
    
    return PARENT_MENU

async def handle_adding_child(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é"""
    user = update.effective_user
    telegram_id = user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    child_name = update.message.text.strip()
    
    try:
        parent = await get_parent(telegram_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–±–µ–Ω–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        child = await get_child_by_name(child_name)
        
        if child:
            # –ï—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
            await add_child_to_parent(parent, child)
            
            await update.message.reply_text(
                f"‚úÖ –†–µ–±–µ–Ω–æ–∫ *{child.name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"–£ –Ω–µ–≥–æ —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parent –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è.",
                parse_mode='Markdown'
            )
        else:
            # –ï—Å–ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            await update.message.reply_text(
                f"‚ùì –†–µ–±–µ–Ω–æ–∫ —Å –∏–º–µ–Ω–µ–º '{child_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start, "
                "–∞ –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parent –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è."
            )
        
        return ConversationHandler.END
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return ConversationHandler.END

async def handle_parent_deed_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–±—Ä–æ–≥–æ –¥–µ–ª–∞ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞
    context.user_data["deed_description"] = update.message.text
    
    await update.message.reply_text(
        "üëç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ —ç—Ç–æ –¥–µ–ª–æ:"
    )
    
    return PARENT_ADD_POINTS

async def handle_parent_deed_points(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è"""
    user = update.effective_user
    telegram_id = user.id
    
    try:
        points = int(update.message.text)
        if points <= 0:
            await update.message.reply_text(
                "‚ùå –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return PARENT_ADD_POINTS
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —Ä–µ–±–µ–Ω–∫–∞
        parent = await get_parent(telegram_id)
        child_telegram_id = context.user_data.get("selected_child_id")
        
        if not child_telegram_id:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ä–µ–±–µ–Ω–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /parent."
            )
            return ConversationHandler.END
        
        child = await get_child(child_telegram_id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ–±—Ä–æ–º –¥–µ–ª–µ
        deed = await create_deed(
            child,
            context.user_data["deed_description"],
            points,
            parent
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
        total_points = await update_child_points(child, points)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        await update.message.reply_text(
            f"üéâ –î–æ–±—Ä–æ–µ –¥–µ–ª–æ –¥–ª—è {child.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"–î–æ–±—Ä–æ–µ –¥–µ–ª–æ: *{deed.description}*\n"
            f"–ë–∞–ª–ª—ã: *+{deed.points}*\n"
            f"–í—Å–µ–≥–æ —É —Ä–µ–±–µ–Ω–∫–∞ —Ç–µ–ø–µ—Ä—å *{total_points} –±–∞–ª–ª–æ–≤*.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parent –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è.",
            parse_mode='Markdown'
        )
        
        return ConversationHandler.END
    
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return PARENT_ADD_POINTS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /parent."
        )
        return ConversationHandler.END

# --- –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "add_deed":
        await query.edit_message_text("üìù –û–ø–∏—à–∏ —Å–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ:")
        return ADDING_DEED
    
    elif query.data == "check_points":
        telegram_id = update.effective_user.id
        try:
            child = await get_child(telegram_id)
            recent_deeds = await get_recent_deeds(child)
            
            text = f"üåü –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*! üåü\n\n"
            if recent_deeds:
                text += "üìã *–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞:*\n"
                for deed in recent_deeds:
                    date_str = deed.created_at.strftime("%d.%m.%Y")
                    text += f"‚Ä¢ {deed.description}: *{deed.points} –±–∞–ª–ª–æ–≤* ({date_str})\n"
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
        
        return CHOOSING_ACTION
    
    elif query.data == "view_rewards":
        rewards = await get_rewards()
        
        if not rewards:
            text = "–ü–æ–∫–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥. –ù–æ —Ç—ã –º–æ–∂–µ—à—å –∫–æ–ø–∏—Ç—å –Ω–∞:\n\n"
            text += f"‚Ä¢ *–û–±—ã—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞*: 1000 –±–∞–ª–ª–æ–≤\n"
            text += f"‚Ä¢ *–ü—Ä–∏—Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ*: 3000 –±–∞–ª–ª–æ–≤\n"
            text += f"‚Ä¢ *–ö—Ä—É—Ç–∞—è –∏–≥—Ä—É—à–∫–∞*: 5000 –±–∞–ª–ª–æ–≤\n"
            text += f"‚Ä¢ *Nintendo Switch*: 35000 –±–∞–ª–ª–æ–≤\n"
        else:
            text = "üéÅ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n\n"
            for reward in rewards:
                text += f"‚Ä¢ *{reward.name}*: {reward.points_required} –±–∞–ª–ª–æ–≤"
                if reward.description:
                    text += f" - {reward.description}"
                text += "\n"
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        return CHOOSING_ACTION
    
    elif query.data == "help":
        help_text = (
            "üåà *–ë–æ—Ç –î–æ–±—Ä—ã—Ö –î–µ–ª* üåà\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –Ω–∏—Ö –±–∞–ª–ª—ã!\n\n"
            "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
            "1. –¢—ã –¥–µ–ª–∞–µ—à—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ\n"
            "2. –ó–∞–ø–∏—Å—ã–≤–∞–µ—à—å –µ–≥–æ –≤ —ç—Ç–æ—Ç –±–æ—Ç\n"
            "3. –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—à—å –±–∞–ª–ª—ã\n"
            "4. –ü–æ–ª—É—á–∞–µ—à—å –∫–ª–∞—Å—Å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ\n"
            "/points - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –±–∞–ª–ª—ã\n"
            "/rewards - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥\n"
            "/parent - –†–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        )
        
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
        return CHOOSING_ACTION
    
    elif query.data == "register_parent":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
        await query.edit_message_text(
            "–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å?\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è:"
        )
        context.user_data["registering_parent"] = True
        return PARENT_PASSWORD
    
    elif query.data == "back_to_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤ start
        user = update.effective_user
        telegram_id = user.id
        
        try:
            child = await get_child(telegram_id)
            
            keyboard = [
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ", callback_data="add_deed")],
                [InlineKeyboardButton("üåü –ú–æ–∏ –±–∞–ª–ª—ã", callback_data="check_points")],
                [InlineKeyboardButton("üéÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", callback_data="view_rewards")],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
                [InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –Ø —Ä–æ–¥–∏—Ç–µ–ª—å", callback_data="register_parent")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"–ü—Ä–∏–≤–µ—Ç, {child.name}! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–≤–æ–∏—Ö –¥–æ–±—Ä—ã—Ö –¥–µ–ª.\n\n"
                f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points} –±–∞–ª–ª–æ–≤*.\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
        
        return CHOOSING_ACTION
    
    return CHOOSING_ACTION

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    context.user_data.clear()
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
    return ConversationHandler.END

async def setup_commands(application: Application) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram"""
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("add", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ"),
        BotCommand("points", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –±–∞–ª–ª—ã"),
        BotCommand("rewards", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥"),
        BotCommand("parent", "–†–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"),
    ]
    await application.bot.set_my_commands(commands)

def main(token=None) -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not token:
        token = os.environ.get("TELEGRAM_TOKEN")
    
    if not token:
        logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.")
        return
    
    application = Application.builder().token(token).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é
    application.post_init = setup_commands
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("add", add_deed_command),
            CommandHandler("parent", parent_command),
        ],
        states={
            CHOOSING_ACTION: [
                CallbackQueryHandler(button_handler),
            ],
            ADDING_DEED: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_deed),
            ],
            ADDING_POINTS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_points),
            ],
            PARENT_AUTH: [
                CallbackQueryHandler(handle_parent_auth),
            ],
            PARENT_PASSWORD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parent_password),
            ],
            PARENT_MENU: [
                CallbackQueryHandler(handle_parent_menu),
            ],
            PARENT_SELECT_CHILD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_adding_child),
                CallbackQueryHandler(handle_parent_menu),
            ],
            PARENT_ADD_DEED: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parent_deed_description),
            ],
            PARENT_ADD_POINTS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_parent_deed_points),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("points", check_points_command))
    application.add_handler(CommandHandler("rewards", view_rewards_command))
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–µ
    application.add_handler(CommandHandler("grouphelp", group_help_command))
    
 # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(MessageHandler(
        filters.ChatType.GROUPS & filters.TEXT & ~filters.COMMAND,
        group_message_handler
    ))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()