from bot.models import Child, KindDeed, Reward, Parent
from flask import Flask, request, jsonify
import os
import django
import logging
import json
import re
from dotenv import load_dotenv
from asgiref.sync import sync_to_async
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "kindness_bot.settings")
django.setup()

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TELEGRAM_TOKEN')
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_contexts = {}
group_states = {}
group_contexts = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞


class States:
    IDLE = 0
    WAITING_DEED = 1
    WAITING_POINTS = 2
    PARENT_PASSWORD = 3
    PARENT_MENU = 4
    PARENT_ADD_CHILD = 5
    PARENT_ADD_DEED = 6
    PARENT_ADD_POINTS = 7

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Django –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ


@sync_to_async
def get_or_create_child(telegram_id, name):
    return Child.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={"name": name}
    )


@sync_to_async
def get_child(telegram_id):
    return Child.objects.get(telegram_id=telegram_id)


@sync_to_async
def get_recent_deeds(child, limit=5):
    return list(child.deeds.order_by('-created_at')[:limit])


@sync_to_async
def get_rewards():
    return list(Reward.objects.all().order_by('points_required'))


@sync_to_async
def create_deed(child, description, points, parent=None):
    return KindDeed.objects.create(
        child=child,
        description=description,
        points=points,
        added_by=parent
    )


@sync_to_async
def update_child_points(child, points):
    child.total_points += points
    child.save()
    return child.total_points


@sync_to_async
def get_or_create_parent(telegram_id, name):
    return Parent.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={"name": name}
    )


@sync_to_async
def get_parent(telegram_id):
    return Parent.objects.get(telegram_id=telegram_id)


@sync_to_async
def verify_parent(telegram_id):
    try:
        return Parent.objects.get(telegram_id=telegram_id), True
    except Parent.DoesNotExist:
        return None, False


@sync_to_async
def get_child_by_name(name):
    try:
        return Child.objects.get(name=name)
    except Child.DoesNotExist:
        return None
    except Child.MultipleObjectsReturned:
        return Child.objects.filter(name=name).first()


@sync_to_async
def is_parent_of_child(parent, child):
    return parent.children.filter(telegram_id=child.telegram_id).exists()


@sync_to_async
def set_parent_password(parent, password):
    import hashlib
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    parent.password = hashed_password
    parent.save()
    return parent


@sync_to_async
def verify_parent_password(parent, password):
    import hashlib
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    return parent.password == hashed_password


@sync_to_async
def get_parent_children(parent):
    return list(parent.children.all())


@sync_to_async
def add_child_to_parent(parent, child):
    parent.children.add(child)
    return True


def is_command(text, command_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π, –≤–æ–∑–º–æ–∂–Ω–æ —Å @–∏–º—è_–±–æ—Ç–∞."""
    if not text:
        return False
    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –∏–º—è –±–æ—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    # /command@botname -> /command
    # /command -> /command
    command_part = text.split('@')[0]
    return command_part == command_name


# –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
@app.route(f'/{TOKEN}', methods=['POST'])
async def webhook():
    try:
        update = request.get_json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω update: {json.dumps(update, indent=2)}")

        if 'message' in update:
            await process_message(update['message'])
        elif 'callback_query' in update:
            await process_callback_query(update['callback_query'])

        return jsonify({'status': 'ok'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π


async def process_message(message):
    try:
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        is_group = message['chat']['type'] in ['group', 'supergroup']

        if 'text' not in message:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç {user_id} –≤ —á–∞—Ç–µ {chat_id}")
            return

        text = message['text']
        first_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º first_name –µ—Å–ª–∏ –Ω–µ—Ç username
        username = message['from'].get('username', first_name)

        current_state = States.IDLE
        if is_group:
            group_states.setdefault(chat_id, {})
            group_contexts.setdefault(chat_id, {})
            group_states[chat_id].setdefault(user_id, States.IDLE)
            group_contexts[chat_id].setdefault(user_id, {})
            current_state = group_states[chat_id][user_id]
        else:
            user_states.setdefault(user_id, States.IDLE)
            user_contexts.setdefault(user_id, {})
            current_state = user_states[user_id]

        logger.info(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}({user_id}) –≤ —á–∞—Ç–µ {chat_id} ({'–≥—Ä—É–ø–ø–∞' if is_group else '–ª–∏—á–Ω—ã–π'}): '{text}'. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if current_state == States.WAITING_DEED:
            logger.info(
                f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞: '{text}' –æ—Ç {username}({user_id}) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ WAITING_DEED")
            if is_group:
                group_contexts[chat_id][user_id]['deed_description'] = text
                group_states[chat_id][user_id] = States.WAITING_POINTS
            else:
                user_contexts[user_id]['deed_description'] = text
                user_states[user_id] = States.WAITING_POINTS
            await send_message(chat_id, f"üëç @{username}, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –∑–∞ —ç—Ç–æ –¥–µ–ª–æ?")
            logger.info(
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {username}({user_id}) –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ WAITING_POINTS")
            return

        elif current_state == States.WAITING_POINTS:
            logger.info(
                f"–ü–æ–ª—É—á–µ–Ω—ã –±–∞–ª–ª—ã: '{text}' –æ—Ç {username}({user_id}) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ WAITING_POINTS")
            try:
                points = int(text)
                if points <= 0:
                    await send_message(chat_id, "‚ùå –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
                    return

                child = await get_child(user_id)
                deed_description = ""
                if is_group:
                    deed_description = group_contexts[chat_id][user_id].get(
                        'deed_description', '–î–æ–±—Ä–æ–µ –¥–µ–ª–æ')
                else:
                    deed_description = user_contexts[user_id].get(
                        'deed_description', '–î–æ–±—Ä–æ–µ –¥–µ–ª–æ')

                await create_deed(child, deed_description, points)
                total_points = await update_child_points(child, points)

                response_text = (
                    f"üéâ –û—Ç–ª–∏—á–Ω–æ, @{username}! –î–æ–±—Ä–æ–µ –¥–µ–ª–æ '{deed_description}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n"
                    f"–¢—ã –ø–æ–ª—É—á–∏–ª *{points}* –±–∞–ª–ª–æ–≤!\n"
                    f"–í—Å–µ–≥–æ —É —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å *{total_points}* –±–∞–ª–ª–æ–≤."
                )
                keyboard = {"inline_keyboard": [
                    [{"text": "üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", "callback_data": "add_deed"}],
                    [{"text": "üè† –í –º–µ–Ω—é", "callback_data": "back_to_menu"}]
                ]}
                await send_message(chat_id, response_text, parse_mode='Markdown', reply_markup=keyboard)

                if is_group:
                    group_states[chat_id][user_id] = States.IDLE
                    if user_id in group_contexts[chat_id]:
                        del group_contexts[chat_id][user_id]
                else:
                    user_states[user_id] = States.IDLE
                    if user_id in user_contexts:
                        del user_contexts[user_id]
                logger.info(
                    f"–î–µ–ª–æ '{deed_description}' ({points} –±–∞–ª–ª–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è {username}({user_id}). –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.")

            except ValueError:
                await send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            except Child.DoesNotExist:
                await send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start")
            return

        elif current_state == States.PARENT_PASSWORD:
            password_input = text
            is_registering = user_contexts[user_id].get(
                'registering_parent', False)

            if is_registering:
                parent, _ = await get_or_create_parent(user_id, first_name)
                await set_parent_password(parent, password_input)
                del user_contexts[user_id]['registering_parent']
                user_states[user_id] = States.PARENT_MENU
                keyboard = {"inline_keyboard": [
                    [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", "callback_data": "add_child"}],
                    [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–π", "callback_data": "view_children"}],
                    [{"text": "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "exit_parent_mode"}]
                ]}
                await send_message(chat_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å.", reply_markup=keyboard)
            else:
                try:
                    parent = await get_parent(user_id)
                    if await verify_parent_password(parent, password_input):
                        user_states[user_id] = States.PARENT_MENU
                        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
                        await process_parent_command(chat_id, user_id, parent_obj=parent)
                    else:
                        await send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel.")
                except Parent.DoesNotExist:
                    await send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parent –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        elif current_state == States.PARENT_ADD_CHILD:
            child_name_input = text.strip()
            # –†–æ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
            parent = await get_parent(user_id)

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–æ–º.
            # –†–µ–±–µ–Ω–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ —Å–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑
            # /start.
            child_to_add = await get_child_by_name(child_name_input)

            if child_to_add:
                await add_child_to_parent(parent, child_to_add)
                await send_message(chat_id, f"‚úÖ –†–µ–±–µ–Ω–æ–∫ *{child_to_add.name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode='Markdown')
            else:
                await send_message(chat_id, f"‚ùì –†–µ–±–µ–Ω–æ–∫ —Å –∏–º–µ–Ω–µ–º '{child_name_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É.")
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è
            user_states[user_id] = States.PARENT_MENU
            # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è
            await process_parent_command(chat_id, user_id, parent_obj=parent)
            return

        elif current_state == States.PARENT_ADD_DEED:
            user_contexts[user_id]['deed_description_parent'] = text
            user_states[user_id] = States.PARENT_ADD_POINTS
            await send_message(chat_id, "üëç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–±–µ–Ω–æ–∫ –∑–∞ —ç—Ç–æ –¥–µ–ª–æ:")
            return

        elif current_state == States.PARENT_ADD_POINTS:
            try:
                points_input = int(text)
                if points_input <= 0:
                    await send_message(chat_id, "‚ùå –ë–∞–ª–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                    return

                parent = await get_parent(user_id)
                selected_child_id = user_contexts[user_id].get(
                    'selected_child_id_parent')
                deed_description_parent = user_contexts[user_id].get(
                    'deed_description_parent', '–î–æ–±—Ä–æ–µ –¥–µ–ª–æ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è')

                if not selected_child_id:
                    await send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ä–µ–±–µ–Ω–æ–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /parent.")
                    user_states[user_id] = States.PARENT_MENU
                    if 'selected_child_id_parent' in user_contexts[user_id]:
                        del user_contexts[user_id]['selected_child_id_parent']
                    if 'deed_description_parent' in user_contexts[user_id]:
                        del user_contexts[user_id]['deed_description_parent']
                    return

                child_obj = await get_child(selected_child_id)
                await create_deed(child_obj, deed_description_parent, points_input, parent)
                total_child_points = await update_child_points(child_obj, points_input)

                await send_message(chat_id,
                                   f"üéâ –î–æ–±—Ä–æ–µ –¥–µ–ª–æ –¥–ª—è *{child_obj.name}* –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                                   f"–î–µ–ª–æ: *{deed_description_parent}*, –ë–∞–ª–ª—ã: *+{points_input}*\n"
                                   f"–í—Å–µ–≥–æ —É —Ä–µ–±–µ–Ω–∫–∞: *{total_child_points}* –±–∞–ª–ª–æ–≤.",
                                   parse_mode='Markdown')
                user_states[user_id] = States.PARENT_MENU
                if 'selected_child_id_parent' in user_contexts[user_id]:
                    del user_contexts[user_id]['selected_child_id_parent']
                if 'deed_description_parent' in user_contexts[user_id]:
                    del user_contexts[user_id]['deed_description_parent']
                # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è
                await process_parent_command(chat_id, user_id, parent_obj=parent)

            except ValueError:
                await send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –±–∞–ª–ª–æ–≤.")
            except Child.DoesNotExist:
                await send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: —Ä–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if is_command(text, '/start'):
            child, created = await get_or_create_child(user_id, first_name)
            welcome_msg = (
                f"–ü—Ä–∏–≤–µ—Ç, {child.name}! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–≤–æ–∏—Ö –¥–æ–±—Ä—ã—Ö –¥–µ–ª.\n"
                f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points}* –±–∞–ª–ª–æ–≤.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            keyboard_main_menu = [
                [{"text": "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ", "callback_data": "add_deed"}],
                [{"text": "üåü –ú–æ–∏ –±–∞–ª–ª—ã", "callback_data": "check_points"}],
                [{"text": "üéÅ –ù–∞–≥—Ä–∞–¥—ã", "callback_data": "view_rewards"}],
                [{"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}]
            ]
            if not is_group:  # –ö–Ω–æ–ø–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
                keyboard_main_menu.append(
                    [{"text": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –Ø —Ä–æ–¥–∏—Ç–µ–ª—å", "callback_data": "parent_mode"}])

            await send_message(chat_id, welcome_msg, parse_mode='Markdown', reply_markup={"inline_keyboard": keyboard_main_menu})
            if is_group:
                group_states[chat_id][user_id] = States.IDLE
            else:
                user_states[user_id] = States.IDLE

        elif is_command(text, '/help'):
            help_text_md = (
                "üåà *–ë–æ—Ç –î–æ–±—Ä—ã—Ö –î–µ–ª* üåà\n\n"
                "–ó–∞–ø–∏—Å—ã–≤–∞–π –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –∏ –ø–æ–ª—É—á–∞–π –±–∞–ª–ª—ã!\n\n"
                "*–ö–æ–º–∞–Ω–¥—ã:*\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/add - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ\n"
                "/points - –ú–æ–∏ –±–∞–ª–ª—ã\n"
                "/rewards - –ù–∞–≥—Ä–∞–¥—ã\n"
                "/parent - –†–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è (–≤ –õ–°)\n"
                "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
                "1. –î–µ–ª–∞–µ—à—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ\n"
                "2. –ó–∞–ø–∏—Å—ã–≤–∞–µ—à—å –≤ –±–æ—Ç (—Å–∞–º –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å)\n"
                "3. –ö–æ–ø–∏—à—å –±–∞–ª–ª—ã\n"
                "4. –ü–æ–ª—É—á–∞–µ—à—å –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
                "*–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–≥—Ä–∞–¥:*\n"
                "‚Ä¢ 1000 - –û–±—ã—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞\n"
                "‚Ä¢ 5000 - –ö—Ä—É—Ç–∞—è –∏–≥—Ä—É—à–∫–∞\n"
                "‚Ä¢ 35000 - Nintendo Switch"
            )
            keyboard = {"inline_keyboard": [
                [{"text": "üè† –í –º–µ–Ω—é", "callback_data": "back_to_menu"}]]}
            await send_message(chat_id, help_text_md, parse_mode='Markdown', reply_markup=keyboard)

        elif is_command(text, '/add'):
            if is_group:
                group_states[chat_id][user_id] = States.WAITING_DEED
            else:
                user_states[user_id] = States.WAITING_DEED
            await send_message(chat_id, f"üìù @{username}, –æ–ø–∏—à–∏ —Å–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ:")

        elif is_command(text, '/points'):
            await process_points_command(chat_id, user_id, username)

        elif is_command(text, '/rewards'):
            await process_rewards_command(chat_id, user_id)

        elif is_command(text, '/parent'):
            if is_group:
                await send_message(chat_id, "–ö–æ–º–∞–Ω–¥–∞ /parent –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
            else:
                await process_parent_command(chat_id, user_id)

        elif is_command(text, '/cancel'):
            state_to_set = States.IDLE
            context_to_clear = None
            if is_group:
                group_states[chat_id][user_id] = state_to_set
                context_to_clear = group_contexts[chat_id].get(user_id)
            else:
                user_states[user_id] = state_to_set
                context_to_clear = user_contexts.get(user_id)

            if context_to_clear:
                context_to_clear.clear()  # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

            await send_message(chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await process_back_to_menu(chat_id, user_id, is_group, first_name)

        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE
        elif text.startswith('/'):
            current_actual_state = group_states[chat_id][user_id] if is_group else user_states[user_id]
            if current_actual_state == States.IDLE:
                await send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è" –¥–µ–ª–∞ –≤ –≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE
        elif is_group and current_state == States.IDLE and re.match(r'(.+)\s(\d+)$', text, re.IGNORECASE):
            match = re.match(r'(.+)\s(\d+)$', text, re.IGNORECASE)
            if match:
                deed_description_quick, points_str_quick = match.groups()
                deed_description_quick = deed_description_quick.strip()
                try:
                    points_quick = int(points_str_quick)
                    if points_quick <= 0:
                        # –ú–æ–∂–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç–∞—è
                        # –æ—à–∏–±–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                        logger.info(
                            f"–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: –Ω–µ–≤–µ—Ä–Ω—ã–µ –±–∞–ª–ª—ã –æ—Ç {username} ({points_str_quick})")
                        return

                    child_quick = await get_child(user_id)
                    await create_deed(child_quick, deed_description_quick, points_quick)
                    total_points_quick = await update_child_points(child_quick, points_quick)

                    await send_message(
                        chat_id,
                        f"‚ö°Ô∏è @{username} –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏–ª –¥–µ–ª–æ: '{deed_description_quick}' (+{points_quick} –±–∞–ª–ª–æ–≤). –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ *{total_points_quick}*.",
                        parse_mode='Markdown'
                    )
                except ValueError:
                    logger.info(
                        f"–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–∞–ª–ª—ã '{points_str_quick}' –æ—Ç {username}")
                except Child.DoesNotExist:
                    await send_message(chat_id, f"@{username}, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –¥–µ–ª–∞.")
                except Exception as e_quick:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–ª–∞ –¥–ª—è {username}: {e_quick}")

    except Exception as e:
        logger.error(
            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_message –æ—Ç {user_id} –≤ {chat_id}: {e}",
            exc_info=True)
        try:
            await send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception as e_send:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ process_message: {e_send}")


async def process_callback_query(callback_query):
    try:
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        user_id = callback_query['from']['id']
        first_name = callback_query['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        username = callback_query['from'].get('username', first_name)
        is_group = callback_query['message']['chat']['type'] in [
            'group', 'supergroup']
        message_id = callback_query['message']['message_id']

        logger.info(
            f"Callback –æ—Ç {username}({user_id}): {data} –≤ —á–∞—Ç–µ {chat_id}")
        # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–∞–ª–∞"
        await answer_callback_query(callback_query['id'])

        if data == 'add_deed':
            if is_group:
                group_states.setdefault(
                    chat_id, {}).setdefault(
                    user_id, States.IDLE)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                group_states[chat_id][user_id] = States.WAITING_DEED
            else:
                user_states.setdefault(
                    user_id, States.IDLE)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                user_states[user_id] = States.WAITING_DEED
            await send_message(chat_id, f"üìù @{username}, –æ–ø–∏—à–∏ —Å–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ:")

        elif data == 'check_points':
            await process_points_command(chat_id, user_id, username)

        elif data == 'view_rewards':
            await process_rewards_command(chat_id, user_id)

        elif data == 'help':
            help_text_md = (
                "üåà *–ë–æ—Ç –î–æ–±—Ä—ã—Ö –î–µ–ª* üåà\n\n"
                # ... (—Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ –≤ process_message)
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/add - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ\n"
                "/points - –ú–æ–∏ –±–∞–ª–ª—ã\n"
                "/rewards - –ù–∞–≥—Ä–∞–¥—ã\n"
                "/parent - –†–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è (–≤ –õ–°)\n"
                "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            )
            keyboard = {"inline_keyboard": [
                [{"text": "üè† –í –º–µ–Ω—é", "callback_data": "back_to_menu"}]]}
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await edit_message(chat_id, message_id, help_text_md, parse_mode='Markdown', reply_markup=keyboard)
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º
            # —Å—Ç–∞—Ä–æ–µ)
            except BaseException:
                await send_message(chat_id, help_text_md, parse_mode='Markdown', reply_markup=keyboard)

        elif data == 'back_to_menu':
            await process_back_to_menu(chat_id, user_id, is_group, first_name, message_id_to_edit=message_id)

        elif data == 'parent_mode':
            if is_group:
                await send_message(chat_id, "–†–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
                return
            await process_parent_command(chat_id, user_id)
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –Ω–µ–≥–æ
            try:
                await edit_message(chat_id, message_id, "–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è...")
            except BaseException:
                pass

        elif data == 'add_child':  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –≤ –õ–°
            if is_group:
                return
            user_states[user_id] = States.PARENT_ADD_CHILD
            await edit_message(chat_id, message_id, "üë∂ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:", reply_markup=None)

        elif data == 'view_children':  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –≤ –õ–°
            if is_group:
                return
            parent = await get_parent(user_id)
            children = await get_parent_children(parent)
            if not children:
                text_to_send = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π."
                kb = {"inline_keyboard": [[{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", "callback_data": "add_child"}], [
                    {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è", "callback_data": "back_to_parent_menu"}]]}
            else:
                text_to_send = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π:*\n\n"
                for ch_obj in children:
                    deeds = await get_recent_deeds(ch_obj, limit=3)
                    text_to_send += f"üë∂ *{ch_obj.name}*: {ch_obj.total_points} –±–∞–ª–ª–æ–≤\n"
                    if deeds:
                        text_to_send += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ª–∞:\n" + \
                            "\n".join([f"‚Ä¢ {d.description}: {d.points} ({d.created_at.strftime('%d.%m')})" for d in deeds]) + "\n"
                    text_to_send += "\n"
                kb = {"inline_keyboard": [
                    [{"text": "‚ûï –î–æ–±. –¥–µ–ª–æ —Ä–µ–±–µ–Ω–∫—É", "callback_data": "add_deed_to_child_select"}],
                    [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è", "callback_data": "back_to_parent_menu"}]
                ]}
            await edit_message(chat_id, message_id, text_to_send, parse_mode='Markdown', reply_markup=kb)

        elif data == 'add_deed_to_child_select':  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –≤ –õ–°
            if is_group:
                return
            parent = await get_parent(user_id)
            children = await get_parent_children(parent)
            if not children:
                await edit_message(chat_id, message_id, "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞.", reply_markup={"inline_keyboard": [[{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", "callback_data": "add_child"}], [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_parent_menu"}]]})
                return

            children_buttons = [
                [{"text": f"üë∂ {ch.name}", "callback_data": f"select_child_for_deed_{ch.telegram_id}"}] for ch in children]
            children_buttons.append(
                [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_parent_menu"}])
            await edit_message(chat_id, message_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–ª–∞:", reply_markup={"inline_keyboard": children_buttons})

        elif data.startswith("select_child_for_deed_"):  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –≤ –õ–°
            if is_group:
                return
            child_tg_id = int(data.split("_")[-1])
            user_contexts.setdefault(
                user_id, {})['selected_child_id_parent'] = child_tg_id
            child_obj = await get_child(child_tg_id)
            user_states[user_id] = States.PARENT_ADD_DEED
            await edit_message(chat_id, message_id, f"–û–ø–∏—à–∏—Ç–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ –¥–ª—è *{child_obj.name}*:", parse_mode='Markdown', reply_markup=None)

        elif data == 'exit_parent_mode':  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –≤ –õ–°
            if is_group:
                return
            user_states[user_id] = States.IDLE
            await edit_message(chat_id, message_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–æ–¥–∏—Ç–µ–ª—è.")
            # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await process_back_to_menu(chat_id, user_id, is_group, first_name)

        elif data == 'back_to_parent_menu':  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –≤ –õ–°
            if is_group:
                return
            parent = await get_parent(user_id)  # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å
            await process_parent_command(chat_id, user_id, parent_obj=parent, message_id_to_edit=message_id)

        else:
            logger.warning(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data} –æ—Ç {username}({user_id})")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ
            # —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –≤ process_callback_query –æ—Ç {user_id} –¥–ª—è data='{data}': {e}",
            exc_info=True)


async def process_points_command(chat_id, user_id, username_display):
    try:
        child = await get_child(user_id)
        recent_deeds = await get_recent_deeds(child, limit=5)
        text = f"üåü @{username_display}, —É —Ç–µ–±—è —Å–µ–π—á–∞—Å *{child.total_points}* –±–∞–ª–ª–æ–≤! üåü\n\n"
        if recent_deeds:
            text += "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞:*\n"
            for deed in recent_deeds:
                text += f"‚Ä¢ {
                    deed.description}: *{
                    deed.points}* ({
                    deed.created_at.strftime('%d.%m.%Y')})\n"
        else:
            text += "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–æ–±—Ä—ã—Ö –¥–µ–ª."

        keyboard = {"inline_keyboard": [
            [{"text": "üè† –í –º–µ–Ω—é", "callback_data": "back_to_menu"}]]}
        await send_message(chat_id, text, parse_mode='Markdown', reply_markup=keyboard)
    except Child.DoesNotExist:
        await send_message(chat_id, f"@{username_display}, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_points_command –¥–ª—è {user_id}: {e}")
        await send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –±–∞–ª–ª–æ–≤.")


async def process_rewards_command(chat_id, user_id):
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ä–µ–±–µ–Ω–æ–∫
        await get_child(user_id)
        # [{name: str, points_required: int, description: str}, ...]
        rewards = await get_rewards()

        text = "üéÅ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:*\n\n"
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã, –µ—Å–ª–∏ –∏–∑ –ë–î –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ –∏–ª–∏ –æ–Ω–∏ —Ç–∞–º –Ω–µ
        # –∑–∞–¥–∞–Ω—ã
        default_rewards_text = (
            "‚Ä¢ –û–±—ã—á–Ω–∞—è –∏–≥—Ä—É—à–∫–∞: 1000 –±–∞–ª–ª–æ–≤\n"
            "‚Ä¢ –í–∑—è—Ç—å –ø—Ä–∏—Å—Ç–∞–≤–∫—É –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ: 3000 –±–∞–ª–ª–æ–≤\n"
            "‚Ä¢ –ö—Ä—É—Ç–∞—è –∏–≥—Ä—É—à–∫–∞: 5000 –±–∞–ª–ª–æ–≤\n"
            "‚Ä¢ Nintendo Switch: 35000 –±–∞–ª–ª–æ–≤\n"
        )
        if not rewards:
            text += "–ü–æ–∫–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥. –í–æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n" + \
                default_rewards_text
        else:
            for reward in rewards:
                text += f"‚Ä¢ *{reward.name}*: {reward.points_required} –±–∞–ª–ª–æ–≤"
                if reward.description:
                    text += f" ({reward.description})"
                text += "\n"
            text += "\n–¢–∞–∫–∂–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:\n" + default_rewards_text

        keyboard = {"inline_keyboard": [
            [{"text": "üè† –í –º–µ–Ω—é", "callback_data": "back_to_menu"}]]}
        await send_message(chat_id, text, parse_mode='Markdown', reply_markup=keyboard)
    except Child.DoesNotExist:
        # username –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ callback_query –∏–ª–∏ message, –Ω–æ –∑–¥–µ—Å—å –µ–≥–æ –Ω–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
        # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–ª–∏ –¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ TG API, –µ—Å–ª–∏ —ç—Ç–æ
        # –∫—Ä–∏—Ç–∏—á–Ω–æ
        await send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä–∞–¥—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_rewards_command –¥–ª—è {user_id}: {e}")
        await send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞–≥—Ä–∞–¥.")


async def process_parent_command(
        chat_id,
        user_id,
        parent_obj=None,
        message_id_to_edit=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /parent –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è."""
    try:
        if not parent_obj:  # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            parent_check, is_registered_parent = await verify_parent(user_id)
            if is_registered_parent:
                parent_obj = parent_check
            else:
                user_states[user_id] = States.PARENT_PASSWORD
                user_contexts.setdefault(
                    user_id, {})['registering_parent'] = True
                text_to_send = (
                    "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å. "
                    "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è:")
                if message_id_to_edit:
                    await edit_message(chat_id, message_id_to_edit, text_to_send, reply_markup=None)
                else:
                    await send_message(chat_id, text_to_send)
                return

        # –ï—Å–ª–∏ parent_obj –µ—Å—Ç—å (–ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        # –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è
        first_name = parent_obj.name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ –ë–î

        children = await get_parent_children(parent_obj)
        parent_menu_text = f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! –†–µ–∂–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è.\n"
        parent_menu_text += f"–£ –≤–∞—Å {
            len(children)} {
            '–¥–µ—Ç–µ–π' if len(children) != 1 else '—Ä–µ–±–µ–Ω–æ–∫'}."

        keyboard_parent = [
            [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", "callback_data": "add_child"}],
            [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–π", "callback_data": "view_children"}],
            [{"text": "üí∏ –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ —Ä–µ–±–µ–Ω–∫—É", "callback_data": "add_deed_to_child_select"}],
            [{"text": "üè† –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞", "callback_data": "exit_parent_mode"}]
        ]
        if message_id_to_edit:
            await edit_message(chat_id, message_id_to_edit, parent_menu_text, reply_markup={"inline_keyboard": keyboard_parent})
        else:
            await send_message(chat_id, parent_menu_text, reply_markup={"inline_keyboard": keyboard_parent})
        user_states[user_id] = States.PARENT_MENU

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –≤ process_parent_command –¥–ª—è {user_id}: {e}",
            exc_info=True)
        text_error = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–æ–¥–∏—Ç–µ–ª—è."
        if message_id_to_edit:
            try:
                await edit_message(chat_id, message_id_to_edit, text_error)
            except BaseException:
                await send_message(chat_id, text_error)
        else:
            await send_message(chat_id, text_error)


async def process_back_to_menu(
        chat_id,
        user_id,
        is_group,
        user_first_name,
        message_id_to_edit=None):
    try:
        child = await get_child(user_id)  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ–±–µ–Ω–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! üëã\n"
            f"–£ —Ç–µ–±—è *{child.total_points}* –±–∞–ª–ª–æ–≤.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        keyboard_main_menu = [
            [{"text": "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ", "callback_data": "add_deed"}],
            [{"text": "üåü –ú–æ–∏ –±–∞–ª–ª—ã", "callback_data": "check_points"}],
            [{"text": "üéÅ –ù–∞–≥—Ä–∞–¥—ã", "callback_data": "view_rewards"}],
            [{"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"}]
        ]
        if not is_group:
            keyboard_main_menu.append(
                [{"text": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –Ø —Ä–æ–¥–∏—Ç–µ–ª—å", "callback_data": "parent_mode"}])

        reply_markup = {"inline_keyboard": keyboard_main_menu}

        if message_id_to_edit:
            try:
                await edit_message(chat_id, message_id_to_edit, text, parse_mode='Markdown', reply_markup=reply_markup)
            except Exception as e_edit:  # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è back_to_menu: {e_edit}, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
                await send_message(chat_id, text, parse_mode='Markdown', reply_markup=reply_markup)
        else:
            await send_message(chat_id, text, parse_mode='Markdown', reply_markup=reply_markup)

        if is_group:
            group_states[chat_id][user_id] = States.IDLE
        else:
            user_states[user_id] = States.IDLE
    except Child.DoesNotExist:
        await send_message(chat_id, f"{user_first_name}, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start")
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –≤ process_back_to_menu –¥–ª—è {user_id}: {e}",
            exc_info=True)
        await send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
async def send_message(chat_id, text, parse_mode=None, reply_markup=None):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {'chat_id': chat_id, 'text': text}
    if parse_mode:
        payload['parse_mode'] = parse_mode
    if reply_markup:
        payload['reply_markup'] = reply_markup

    try:
        # @sync_to_async # sync_to_async –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è requests –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ Django view –Ω–∞–ø—Ä—è–º—É—é
        # response = requests.post(url, json=payload) # –≠—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤

        # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ —Å requests –Ω—É–∂–µ–Ω httpx –∏–ª–∏ aiohttp, –ª–∏–±–æ –∑–∞–ø—É—Å–∫–∞—Ç—å requests –≤ executor
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Ç.–∫. –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —á–µ—Ä–µ–∑ asgiref –¥–ª—è Django
        # –í —Ä–µ–∞–ª—å–Ω–æ–º Flask async view –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async http client
        # –ù–æ —Ç.–∫. —ç—Ç–æ Flask –ø–æ–¥ ASGI (–≤–µ—Ä–æ—è—Ç–Ω–æ, —á–µ—Ä–µ–∑ Daphne/Uvicorn, —Ç.–∫. –µ—Å—Ç—å
        # django.setup()), requests.post –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç
        @sync_to_async
        def do_post_request():
            return requests.post(url, json=payload)
        response = await do_post_request()

        response_json = response.json()
        if not response_json.get('ok'):
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response_json} | Payload: {payload}")
        return response_json
    except Exception as e:
        logger.error(
            f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} | Payload: {payload}",
            exc_info=True)
        return None


async def edit_message(
        chat_id,
        message_id,
        text,
        parse_mode=None,
        reply_markup=None):
    url = f"https://api.telegram.org/bot{TOKEN}/editMessageText"
    payload = {'chat_id': chat_id, 'message_id': message_id, 'text': text}
    if parse_mode:
        payload['parse_mode'] = parse_mode
    if reply_markup:
        payload['reply_markup'] = reply_markup

    try:
        @sync_to_async
        def do_post_request():
            return requests.post(url, json=payload)
        response = await do_post_request()

        response_json = response.json()
        if not response_json.get('ok'):
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response_json} | Payload: {payload}")
        return response_json
    except Exception as e:
        logger.error(
            f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} | Payload: {payload}",
            exc_info=True)
        return None


async def answer_callback_query(
        callback_query_id,
        text=None,
        show_alert=False):
    url = f"https://api.telegram.org/bot{TOKEN}/answerCallbackQuery"
    payload = {
        'callback_query_id': callback_query_id,
        'show_alert': show_alert}
    if text:
        payload['text'] = text

    try:
        @sync_to_async
        def do_post_request():
            return requests.post(url, json=payload)
        response = await do_post_request()

        response_json = response.json()
        if not response_json.get('ok'):
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query: {response_json} | Payload: {payload}")
        return response_json
    except Exception as e:
        logger.error(
            f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback_query: {e} | Payload: {payload}",
            exc_info=True)
        return None

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è webhook (–æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∏
# –¥–µ–ø–ª–æ–µ –Ω–∞ PaaS)


@app.route('/set_webhook', methods=['GET'])
def set_webhook_route():  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π set_webhook
    host = request.host_url  # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL —Ö–æ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "https://example.com/"
    webhook_url_path = f"{TOKEN}"  # –ü—É—Ç—å –∫ –≤–µ–±—Ö—É–∫—É
    full_webhook_url = f"{host.rstrip('/')}/{webhook_url_path.lstrip('/')}"

    # –î–ª—è API Telegram –Ω—É–∂–µ–Ω URL –≤–µ–±—Ö—É–∫–∞ –±–µ–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–∞–º–æ–º URL setWebhook
    # –ü–∞—Ä–∞–º–µ—Ç—Ä allowed_updates –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ JSON payload –∑–∞–ø—Ä–æ—Å–∞ setWebhook

    api_url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
    # allowed_updates –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ ['message', 'callback_query']
    payload = {'url': full_webhook_url}

    try:
        response = requests.post(api_url, json=payload)
        data = response.json()
        if data.get('ok'):
            return jsonify({'status': 'success',
                            'message': f'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {full_webhook_url}',
                            'result': data})
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {data}")
            return jsonify(
                {'status': 'error', 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook', 'result': data}), 400
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        return jsonify(
            {'status': 'error', 'message': f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}'}), 500


@app.route('/remove_webhook', methods=['GET'])
def remove_webhook_route():  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
    url = f"https://api.telegram.org/bot{TOKEN}/deleteWebhook"
    try:
        response = requests.get(url)
        data = response.json()
        return jsonify({'status': 'success' if data.get('ok') else 'error', 'message': data.get(
            'description', 'Webhook —É–¥–∞–ª–µ–Ω/–Ω–µ —É–¥–∞–ª–µ–Ω'), 'result': data})
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
        return jsonify(
            {'status': 'error', 'message': f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}'}), 500


@app.route('/webhook_status', methods=['GET'])
def webhook_status_route():  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
    url = f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo"
    try:
        response = requests.get(url)
        data = response.json()
        return jsonify({'status': 'success', 'webhook_info': data})
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ webhook: {e}")
        return jsonify(
            {'status': 'error', 'message': f'–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}'}), 500


# –û–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫ –Ω–∞ /<TOKEN>
@app.route('/web-hook')
def web_hook_info_page():
    return "–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. –í–µ–±—Ö—É–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–π URL."


@app.route('/')
def home():
    return '–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–æ–±—Ä—ã—Ö –¥–µ–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'


if __name__ == '__main__':
    # –ü—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ Flask dev server –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å async/await –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    # –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ASGI —Å–µ—Ä–≤–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, Uvicorn:
    # uvicorn your_script_name:app --reload
    # –û–¥–Ω–∞–∫–æ, django.setup() –∏ sync_to_async –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—Ç, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ASGI.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å app.run(), –Ω–æ
    # @sync_to_async –≤—ã–∑–æ–≤—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.

    # –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Flask >= 2.0, –æ–Ω –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É async views.
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∞ –≤–µ—Ä—Å–∏—è Flask —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç.
    logger.info("–ó–∞–ø—É—Å–∫ Flask development server...")
    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))
